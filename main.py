import streamlit as st
import pandas as pd
import numpy as np
from utils.data_loader import get_file_uploader
from utils.data_analyzer import (get_basic_info, analyze_data_types, 
                               analyze_duplicates, get_numerical_stats,
                               analyze_outliers)
from utils.data_visualizer import (create_histogram, create_box_plot, 
                                create_scatter_plot, plot_correlation_matrix,
                                plot_missing_values, plot_outliers)
from utils.data_processor import (change_column_type, handle_missing_values,
                               remove_duplicates, export_data)

def load_test_data():
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        return pd.read_csv('test_data.csv')
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None

def main():
    st.set_page_config(
        page_title="–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö",
        page_icon="üìä",
        layout="wide"
    )

    st.title("üìä –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
    
    # –°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    st.subheader("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if st.button("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"):
        test_df = load_test_data()
        if test_df is not None:
            st.session_state['df'] = test_df
            st.success("–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ —Ñ–∞–π–ª–æ–≤
    uploaded_df = get_file_uploader()
    if uploaded_df is not None:
        st.session_state['df'] = uploaded_df
    
    # –†–∞–±–æ—Ç–∞ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    if 'df' in st.session_state:
        df = st.session_state['df']
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        tabs = st.tabs(["–û–±–∑–æ—Ä", "–ê–Ω–∞–ª–∏–∑", "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", "–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞", "–≠–∫—Å–ø–æ—Ä—Ç"])
        
        # –í–∫–ª–∞–¥–∫–∞ –æ–±–∑–æ—Ä–∞
        with tabs[0]:
            get_basic_info(df)
            st.dataframe(df.head())
            analyze_data_types(df)
        
        # –í–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        with tabs[1]:
            analyze_duplicates(df)
            get_numerical_stats(df)
            plot_missing_values(df)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–æ—Å–æ–≤
            st.subheader("–ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–æ—Å–æ–≤")
            numerical_cols = df.select_dtypes(include=[np.number]).columns
            if len(numerical_cols) > 0:
                selected_column = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–±—Ä–æ—Å–æ–≤",
                    numerical_cols
                )
                lower_bound, upper_bound = analyze_outliers(df, selected_column)
                plot_outliers(df, selected_column, lower_bound, upper_bound)
            else:
                st.info("–í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–±—Ä–æ—Å–æ–≤")
        
        # –í–∫–ª–∞–¥–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        with tabs[2]:
            st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
            
            viz_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", 
                                 ["–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "Box Plot", "Scatter Plot", "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞"])
            
            if viz_type in ["–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "Box Plot"]:
                column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü", 
                                   df.select_dtypes(include=[np.number]).columns)
                if viz_type == "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞":
                    create_histogram(df, column)
                else:
                    create_box_plot(df, column)
                    
            elif viz_type == "Scatter Plot":
                col1, col2 = st.columns(2)
                with col1:
                    x_column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ X", 
                                         df.select_dtypes(include=[np.number]).columns)
                with col2:
                    y_column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ Y", 
                                         df.select_dtypes(include=[np.number]).columns)
                create_scatter_plot(df, x_column, y_column)
                
            else:
                plot_correlation_matrix(df)
        
        # –í–∫–ª–∞–¥–∫–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏
        with tabs[3]:
            st.subheader("–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            
            process_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏", 
                                     ["–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö", 
                                      "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤", 
                                      "–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"])
            
            if process_type == "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö":
                col1, col2 = st.columns(2)
                with col1:
                    column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü", df.columns)
                with col2:
                    new_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø", 
                                         ['int64', 'float64', 'str', 'category'])
                
                if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å"):
                    df, success = change_column_type(df, column, new_type)
                    if success:
                        st.session_state['df'] = df
                        st.success("–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω")
                        
            elif process_type == "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤":
                col1, col2 = st.columns(2)
                with col1:
                    column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü", df.columns)
                with col2:
                    method = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥", 
                                       ['drop', 'fill_value', 'fill_mean', 'fill_median'])
                
                value = None
                if method == 'fill_value':
                    value = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
                
                if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å"):
                    df, success = handle_missing_values(df, column, method, value)
                    if success:
                        st.session_state['df'] = df
                        st.success("–ü—Ä–æ–ø—É—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
                        
            else:
                if st.button("–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã"):
                    df, success = remove_duplicates(df)
                    if success:
                        st.session_state['df'] = df
                        st.success("–î—É–±–ª–∏–∫–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
        
        # –í–∫–ª–∞–¥–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        with tabs[4]:
            st.subheader("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
            
            format_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç", ['csv', 'excel'])
            
            if st.button("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"):
                data, mime_type, filename = export_data(df, format_type)
                if data is not None:
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª",
                        data=data,
                        file_name=filename,
                        mime=mime_type
                    )

if __name__ == "__main__":
    main()
