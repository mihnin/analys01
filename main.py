import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
from utils.data_loader import get_file_uploader
from utils.data_analyzer import (get_basic_info, analyze_data_types, 
                                analyze_duplicates, get_numerical_stats,
                                analyze_outliers)
from utils.data_visualizer import (create_histogram, create_box_plot, 
                                create_scatter_plot, plot_correlation_matrix,
                                plot_missing_values, plot_outliers)
from utils.data_processor import (change_column_type, handle_missing_values,
                                remove_duplicates, export_data)
from utils.predictor import (prepare_data, train_model, evaluate_model,
                           plot_feature_importance, plot_predictions)
from utils.database import (init_db, save_dataframe, load_dataframe, delete_dataframe,
                          get_table_info, get_last_update)

def load_test_data():
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        df = pd.read_csv('test_data.csv')
        if save_dataframe(df, source='test_data'):
            st.success("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None

def format_datetime(dt):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    """
    if dt:
        return dt.strftime("%d.%m.%Y %H:%M:%S")
    return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

def get_source_name(source):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤ –ø–æ–Ω—è—Ç–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    source_mapping = {
        'test_data': '–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ',
        'file_upload': '–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª',
        'unknown': '–î–∞–Ω–Ω—ã–µ'
    }
    return source_mapping.get(source, '–î–∞–Ω–Ω—ã–µ')

def check_data_quality(df, target, features):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º –º–æ–¥–µ–ª–∏
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    missing_target = df[target].isnull().sum()
    missing_features = df[features].isnull().sum()
    
    has_issues = False
    
    if missing_target > 0:
        st.warning(f"‚ö†Ô∏è –í —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π '{target}' –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {missing_target} "
                  f"–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π ({round(missing_target/len(df)*100, 2)}%)")
        has_issues = True
    
    features_with_nulls = missing_features[missing_features > 0]
    if not features_with_nulls.empty:
        st.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö:")
        for feature, null_count in features_with_nulls.items():
            st.write(f"- {feature}: {null_count} –ø—Ä–æ–ø—É—Å–∫–æ–≤ "
                    f"({round(null_count/len(df)*100, 2)}%)")
        has_issues = True
    
    if has_issues:
        st.info("‚ÑπÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º –º–æ–¥–µ–ª–∏. "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É '–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞' –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.")
    
    return not has_issues

def main():
    st.set_page_config(
        page_title="–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö",
        page_icon="üìä",
        layout="wide"
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    if not init_db():
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        return

    st.title("üìä –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
    
    # –°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    st.subheader("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    if 'df' not in st.session_state:
        df = load_dataframe()
        if df is not None:
            st.session_state['df'] = df
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if st.button("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"):
        test_df = load_test_data()
        if test_df is not None:
            st.session_state['df'] = test_df
            st.success("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ —Ñ–∞–π–ª–æ–≤
    uploaded_df = get_file_uploader()
    if uploaded_df is not None:
        st.session_state['df'] = uploaded_df
        if save_dataframe(uploaded_df, source='file_upload'):
            st.success("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    
    # –†–∞–±–æ—Ç–∞ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    if 'df' in st.session_state:
        df = st.session_state['df']
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
        table_info = get_table_info()
        source_name = get_source_name(table_info['source'] if table_info else 'unknown')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        tabs = st.tabs([
            "–û–±–∑–æ—Ä", 
            "–ê–Ω–∞–ª–∏–∑", 
            "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è",
            "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", 
            "–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞",
            "–≠–∫—Å–ø–æ—Ä—Ç",
            "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
        ])
        
        # –í–∫–ª–∞–¥–∫–∞ –æ–±–∑–æ—Ä–∞
        with tabs[0]:
            get_basic_info(df)
            st.dataframe(df.head())
            analyze_data_types(df)
        
        # –í–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        with tabs[1]:
            analyze_duplicates(df)
            get_numerical_stats(df)
            plot_missing_values(df)
            
            # –ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–æ—Å–æ–≤
            st.subheader("–ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–æ—Å–æ–≤")
            numerical_cols = df.select_dtypes(include=[np.number]).columns
            if len(numerical_cols) > 0:
                selected_column = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–±—Ä–æ—Å–æ–≤",
                    numerical_cols,
                    key="outliers_column"
                )
                lower_bound, upper_bound = analyze_outliers(df, selected_column)
                plot_outliers(df, selected_column, lower_bound, upper_bound)
            else:
                st.info("–í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–±—Ä–æ—Å–æ–≤")
        
        # –í–∫–ª–∞–¥–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        with tabs[2]:
            st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
            
            viz_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", 
                                  ["–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "Box Plot", "Scatter Plot", "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞"],
                                  key="viz_type")
            
            if viz_type in ["–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "Box Plot"]:
                column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü", 
                                    df.select_dtypes(include=[np.number]).columns,
                                    key="viz_column")
                if viz_type == "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞":
                    create_histogram(df, column)
                else:
                    create_box_plot(df, column)
                    
            elif viz_type == "Scatter Plot":
                col1, col2 = st.columns(2)
                with col1:
                    x_column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ X", 
                                          df.select_dtypes(include=[np.number]).columns,
                                          key="scatter_x")
                with col2:
                    y_column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ Y", 
                                          df.select_dtypes(include=[np.number]).columns,
                                          key="scatter_y")
                create_scatter_plot(df, x_column, y_column)
                
            else:
                plot_correlation_matrix(df)
        
        # –í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
        with tabs[3]:
            st.subheader("–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ")
            
            # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
            task_type = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏",
                ["–†–µ–≥—Ä–µ—Å—Å–∏—è", "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è"],
                key="task_type"
            )
            task_type = task_type.lower()
            
            # –í—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            if task_type == "—Ä–µ–≥—Ä–µ—Å—Å–∏—è":
                target_columns = df.select_dtypes(include=[np.number]).columns
                if len(target_columns) == 0:
                    st.error("‚ùå –í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏")
                    st.stop()
            else:
                target_columns = df.select_dtypes(include=['object', 'category']).columns
                if len(target_columns) == 0:
                    st.error("‚ùå –í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∑–∞–¥–∞—á–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                    st.stop()
                
            target = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é",
                target_columns,
                key="target"
            )
            
            # –í—ã–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            feature_columns = st.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è",
                [col for col in df.columns if col != target],
                key="features"
            )
            
            if st.button("–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"):
                if len(feature_columns) == 0:
                    st.error("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∏–∑–Ω–∞–∫ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
                else:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
                    if check_data_quality(df, target, feature_columns):
                        with st.spinner("‚è≥ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏..."):
                            try:
                                # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                                X_train, X_test, y_train, y_test, scaler = prepare_data(
                                    df, target, feature_columns, task_type
                                )
                                
                                # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
                                model = train_model(X_train, y_train, task_type)
                                
                                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
                                predictions = model.predict(X_test)
                                
                                # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
                                metrics = evaluate_model(model, X_test, y_test, task_type)
                                
                                # –í—ã–≤–æ–¥ –º–µ—Ç—Ä–∏–∫
                                st.subheader("üìä –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏:")
                                for metric, value in metrics.items():
                                    if metric != 'Report':
                                        st.metric(metric, value)
                                
                                # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                                st.subheader("üìà –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
                                plot_feature_importance(model, feature_columns)
                                
                                st.subheader("üéØ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:")
                                plot_predictions(y_test, predictions, task_type)
                                
                                st.success("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")
                            except Exception as e:
                                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
        
        # –í–∫–ª–∞–¥–∫–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏
        with tabs[4]:
            st.subheader("–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            
            process_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏", 
                                      ["–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö", 
                                       "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤", 
                                       "–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"],
                                      key="process_type")
            
            if process_type == "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö":
                col1, col2 = st.columns(2)
                with col1:
                    column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü", df.columns,
                                       key="change_type_column")
                with col2:
                    new_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø", 
                                         ['int64', 'float64', 'str', 'category'],
                                         key="new_type")
                
                if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å"):
                    df, success = change_column_type(df, column, new_type)
                    if success:
                        st.session_state['df'] = df
                        save_dataframe(df)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
                        st.success("‚úÖ –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω")
                        
            elif process_type == "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤":
                col1, col2 = st.columns(2)
                with col1:
                    column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü", df.columns,
                                       key="missing_column")
                with col2:
                    method = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥", 
                                      ['drop', 'fill_value', 'fill_mean', 'fill_median'],
                                      key="missing_method")
                
                value = None
                if method == 'fill_value':
                    value = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
                
                if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å"):
                    df, success = handle_missing_values(df, column, method, value)
                    if success:
                        st.session_state['df'] = df
                        save_dataframe(df)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
                        st.success("‚úÖ –ü—Ä–æ–ø—É—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
                        
            else:
                if st.button("–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã"):
                    df, success = remove_duplicates(df)
                    if success:
                        st.session_state['df'] = df
                        save_dataframe(df)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
                        st.success("‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
        
        # –í–∫–ª–∞–¥–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        with tabs[5]:
            st.subheader("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
            
            format_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç", ['csv', 'excel'],
                                    key="export_format")
            
            if st.button("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"):
                data, mime_type, filename = export_data(df, format_type)
                if data is not None:
                    st.download_button(
                        label="–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª",
                        data=data,
                        file_name=filename,
                        mime=mime_type
                    )

        # –í–∫–ª–∞–¥–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        with tabs[6]:
            st.subheader("–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            st.info("üîå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Ç–∞–±–ª–∏—Ü–µ
            if table_info:
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫", table_info['rows'])
                with col2:
                    st.metric("–†–∞–∑–º–µ—Ä –ë–î (–ú–ë)", table_info['size'])
                with col3:
                    st.metric("–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö", get_source_name(table_info['source']))
                with col4:
                    st.metric("–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", 
                             format_datetime(datetime.fromisoformat(table_info['last_update'])))
            else:
                st.warning("‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü")
            
            # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ë–î
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"):
                if delete_dataframe():
                    st.success("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞")
                    if 'df' in st.session_state:
                        del st.session_state['df']
                    st.experimental_rerun()

if __name__ == "__main__":
    main()
