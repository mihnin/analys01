import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
from utils.data_loader import get_file_uploader
from utils.data_analyzer import (get_basic_info, analyze_data_types, 
                                analyze_duplicates, get_numerical_stats,
                                analyze_outliers)
from utils.data_visualizer import (create_histogram, create_box_plot, 
                                create_scatter_plot, plot_correlation_matrix,
                                plot_missing_values, plot_outliers)
from utils.data_processor import (change_column_type, handle_missing_values,
                                remove_duplicates, export_data)
from utils.database import (init_db, save_dataframe, load_dataframe, delete_dataframe,
                           get_table_info, get_last_update, save_analysis_state,
                           load_analysis_state)
from utils.report_generator import generate_data_report

def load_test_data():
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        df = pd.read_csv('test_data.csv')
        if save_dataframe(df, source='test_data'):
            st.success("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return None

def format_datetime(dt):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    """
    if dt:
        return dt.strftime("%d.%m.%Y %H:%M:%S")
    return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

def get_source_name(source):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤ –ø–æ–Ω—è—Ç–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    source_mapping = {
        'test_data': '–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ',
        'file_upload': '–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª',
        'unknown': '–î–∞–Ω–Ω—ã–µ'
    }
    return source_mapping.get(source, '–î–∞–Ω–Ω—ã–µ')

def save_current_state():
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
    """
    state = {
        'active_tab': st.session_state.get('active_tab', 0),
        'viz_settings': {
            'viz_type': st.session_state.get('viz_type', '–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞'),
            'viz_column': st.session_state.get('viz_column', None),
            'scatter_x': st.session_state.get('scatter_x', None),
            'scatter_y': st.session_state.get('scatter_y', None)
        },
        'process_settings': {
            'process_type': st.session_state.get('process_type', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö'),
            'change_type_column': st.session_state.get('change_type_column', None),
            'new_type': st.session_state.get('new_type', 'int64'),
            'missing_column': st.session_state.get('missing_column', None),
            'missing_method': st.session_state.get('missing_method', 'drop')
        },
        'outliers_column': st.session_state.get('outliers_column', None)
    }
    save_analysis_state('main_app', state)

def load_saved_state():
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
    """
    state = load_analysis_state('main_app')
    if state:
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ session_state
        st.session_state['active_tab'] = state.get('active_tab', 0)
        
        viz_settings = state.get('viz_settings', {})
        st.session_state['viz_type'] = viz_settings.get('viz_type', '–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞')
        st.session_state['viz_column'] = viz_settings.get('viz_column')
        st.session_state['scatter_x'] = viz_settings.get('scatter_x')
        st.session_state['scatter_y'] = viz_settings.get('scatter_y')
        
        process_settings = state.get('process_settings', {})
        st.session_state['process_type'] = process_settings.get('process_type', '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö')
        st.session_state['change_type_column'] = process_settings.get('change_type_column')
        st.session_state['new_type'] = process_settings.get('new_type', 'int64')
        st.session_state['missing_column'] = process_settings.get('missing_column')
        st.session_state['missing_method'] = process_settings.get('missing_method', 'drop')
        
        st.session_state['outliers_column'] = state.get('outliers_column')

def main():
    st.set_page_config(
        page_title="–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö",
        page_icon="üìä",
        layout="wide"
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    if not init_db():
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if 'state_loaded' not in st.session_state:
        load_saved_state()
        st.session_state['state_loaded'] = True

    st.title("üìä –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
    
    # –°–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    st.subheader("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    if 'df' not in st.session_state:
        df = load_dataframe()
        if df is not None:
            st.session_state['df'] = df
            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if st.button("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"):
        test_df = load_test_data()
        if test_df is not None:
            st.session_state['df'] = test_df
            st.success("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ —Ñ–∞–π–ª–æ–≤
    uploaded_df = get_file_uploader()
    if uploaded_df is not None:
        st.session_state['df'] = uploaded_df
        if save_dataframe(uploaded_df, source='file_upload'):
            st.success("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    
    # –†–∞–±–æ—Ç–∞ —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    if 'df' in st.session_state:
        df = st.session_state['df']
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ
        table_info = get_table_info()
        source_name = get_source_name(table_info['source'] if table_info else 'unknown')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        tab_names = [
            "–û–±–∑–æ—Ä", 
            "–ê–Ω–∞–ª–∏–∑", 
            "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è",
            "–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞",
            "–≠–∫—Å–ø–æ—Ä—Ç",
            "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
            "–û—Ç—á–µ—Ç—ã"
        ]
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
        active_tab = st.session_state.get('active_tab', 0)
        tabs = st.tabs(tab_names)
        
        # –í–∫–ª–∞–¥–∫–∞ –æ–±–∑–æ—Ä–∞
        with tabs[0]:
            if active_tab == 0:
                get_basic_info(df)
                st.dataframe(df.head())
                analyze_data_types(df)
        
        # –í–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        with tabs[1]:
            if active_tab == 1:
                analyze_duplicates(df)
                get_numerical_stats(df)
                plot_missing_values(df)
                
                # –ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–æ—Å–æ–≤
                st.subheader("–ê–Ω–∞–ª–∏–∑ –≤—ã–±—Ä–æ—Å–æ–≤")
                numerical_cols = df.select_dtypes(include=[np.number]).columns
                if len(numerical_cols) > 0:
                    selected_column = st.selectbox(
                        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–±—Ä–æ—Å–æ–≤",
                        numerical_cols,
                        key="outliers_column"
                    )
                    lower_bound, upper_bound = analyze_outliers(df, selected_column)
                    plot_outliers(df, selected_column, lower_bound, upper_bound)
                else:
                    st.info("–í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–±—Ä–æ—Å–æ–≤")
        
        # –í–∫–ª–∞–¥–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        with tabs[2]:
            if active_tab == 2:
                st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
                
                viz_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", 
                                    ["–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "Box Plot", "Scatter Plot", "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞"],
                                    key="viz_type")
                
                if viz_type in ["–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "Box Plot"]:
                    column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü", 
                                      df.select_dtypes(include=[np.number]).columns,
                                      key="viz_column")
                    if viz_type == "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞":
                        create_histogram(df, column)
                    else:
                        create_box_plot(df, column)
                        
                elif viz_type == "Scatter Plot":
                    col1, col2 = st.columns(2)
                    with col1:
                        x_column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ X", 
                                            df.select_dtypes(include=[np.number]).columns,
                                            key="scatter_x")
                    with col2:
                        y_column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ Y", 
                                            df.select_dtypes(include=[np.number]).columns,
                                            key="scatter_y")
                    create_scatter_plot(df, x_column, y_column)
                    
                else:
                    plot_correlation_matrix(df)
        
        # –í–∫–ª–∞–¥–∫–∞ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏
        with tabs[3]:
            if active_tab == 3:
                st.subheader("–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
                
                process_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏", 
                                        ["–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö", 
                                         "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤", 
                                         "–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"],
                                        key="process_type")
                
                if process_type == "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö":
                    col1, col2 = st.columns(2)
                    with col1:
                        column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü", df.columns,
                                          key="change_type_column")
                    with col2:
                        new_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø", 
                                            ['int64', 'float64', 'str', 'category'],
                                            key="new_type")
                    
                    if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å"):
                        df, success = change_column_type(df, column, new_type)
                        if success:
                            st.session_state['df'] = df
                            save_dataframe(df)
                            st.success("‚úÖ –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω")
                            
                elif process_type == "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤":
                    col1, col2 = st.columns(2)
                    with col1:
                        column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü", df.columns,
                                          key="missing_column")
                    with col2:
                        method = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥", 
                                         ['drop', 'fill_value', 'fill_mean', 'fill_median'],
                                         key="missing_method")
                    
                    value = None
                    if method == 'fill_value':
                        value = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
                    
                    if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å"):
                        df, success = handle_missing_values(df, column, method, value)
                        if success:
                            st.session_state['df'] = df
                            save_dataframe(df)
                            st.success("‚úÖ –ü—Ä–æ–ø—É—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
                            
                else:
                    if st.button("–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã"):
                        df, success = remove_duplicates(df)
                        if success:
                            st.session_state['df'] = df
                            save_dataframe(df)
                            st.success("‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
        
        # –í–∫–ª–∞–¥–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        with tabs[4]:
            if active_tab == 4:
                st.subheader("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
                
                format_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç", ['csv', 'excel'],
                                       key="export_format")
                
                if st.button("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"):
                    data, mime_type, file_name = export_data(df, format_type)
                    if data:
                        st.download_button(
                            label="–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª",
                            data=data,
                            file_name=file_name,
                            mime=mime_type
                        )
        
        # –í–∫–ª–∞–¥–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        with tabs[5]:
            if active_tab == 5:
                st.subheader("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                
                if table_info:
                    st.write(f"**–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:** {source_name}")
                    st.write(f"**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {format_datetime(datetime.fromisoformat(table_info['last_update']))}")
                    st.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:** {table_info['rows']}")
                    st.write(f"**–†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:** {table_info['size']} –ú–ë")
                    
                    if st.button("–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"):
                        if delete_dataframe():
                            st.session_state.pop('df', None)
                            st.success("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞")
                            st.experimental_rerun()
                else:
                    st.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
        
        # –í–∫–ª–∞–¥–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
        with tabs[6]:
            if active_tab == 6:
                st.subheader("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤")
                
                report_options = st.multiselect(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –æ—Ç—á–µ—Ç",
                    ["–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                     "–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", "–î—É–±–ª–∏–∫–∞—Ç—ã"],
                    default=["–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]
                )
                
                if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"):
                    try:
                        report_bytes = generate_data_report(df, sections=report_options)
                        
                        st.download_button(
                            label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç",
                            data=report_bytes,
                            file_name=f"data_analysis_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                            mime="application/pdf"
                        )
                        st.success("‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
                    except Exception as e:
                        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        for i, tab in enumerate(tabs):
            if tab._is_active():
                st.session_state['active_tab'] = i
                save_current_state()
                break

if __name__ == "__main__":
    main()
