import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
import logging
import os
from utils.data_analyzer import (get_basic_info, analyze_data_types, analyze_duplicates, 
                               get_numerical_stats, analyze_outliers, analyze_trends_and_seasonality, detect_anomalies)
from utils.data_visualizer import (create_histogram, create_box_plot, create_scatter_plot,
                                plot_correlation_matrix, plot_missing_values, plot_outliers)
from utils.data_processor import (change_column_type, handle_missing_values, 
                               remove_duplicates, export_data)
from utils.database import (delete_dataframe, get_table_info)
from utils.report_generator import generate_data_report
from pathlib import Path

def show_overview_tab(df):
    st.header("–û–±–∑–æ—Ä")
    get_basic_info(df)
    st.dataframe(df.head())
    analyze_data_types(df)

def show_analysis_tab(df):
    st.header("–ê–Ω–∞–ª–∏–∑")
    analyze_duplicates(df)
    get_numerical_stats(df)
    plot_missing_values(df)

    # --- –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏ ---
    st.subheader("–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏")
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –¥–∞—Ç–∞–º–∏
    date_columns = df.select_dtypes(include=['datetime64']).columns.tolist()
    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å—Ç–æ–ª–±—Ü–æ–≤, –ø—Ä–æ–≤–µ—Ä—è–µ–º object —Å—Ç–æ–ª–±—Ü—ã
    if not date_columns:
        for col in df.select_dtypes(include=['object']).columns:
            try:
                pd.to_datetime(df[col], errors='raise')
                date_columns.append(col)
            except:
                continue
                
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    numeric_columns = df.select_dtypes(include=[np.number]).columns.tolist()
    
    if not date_columns:
        st.warning("–í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã —Å –¥–∞—Ç–∞–º–∏")
        return
        
    if not numeric_columns:
        st.warning("–í –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã")
        return
        
    date_column = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–∞—Ç—ã",
        date_columns,
        key='date_column_select'
    )
    
    value_column = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –∑–Ω–∞—á–µ–Ω–∏–π",
        numeric_columns,
        key='value_column_select'
    )
    
    if date_column and value_column:
        analyze_trends_and_seasonality(df, date_column, value_column)

    # --- –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π ---
    st.subheader("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π")
    anomaly_column = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–π", 
        numeric_columns,
        key='anomaly_column_select'
    )
    if anomaly_column:
        detect_anomalies(df, anomaly_column)

def show_visualization_tab(df):
    st.header("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
    viz_type = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", 
        ["–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "Box Plot", "Scatter Plot", "–ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞"],
        key="viz_type"
    )
    
    if viz_type in ["–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "Box Plot"]:
        column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü", df.select_dtypes(include=[np.number]).columns)
        if viz_type == "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞":
            create_histogram(df, column)
        else:
            create_box_plot(df, column)
    elif viz_type == "Scatter Plot":
        numerical_cols = df.select_dtypes(include=[np.number]).columns
        x_column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ X", numerical_cols)
        y_column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ Y", numerical_cols)
        create_scatter_plot(df, x_column, y_column)
    else:
        plot_correlation_matrix(df)

def show_preprocessing_tab(df):
    st.header("–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞")
    process_type = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏", 
        ["–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤", "–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"]
    )
    
    if process_type == "–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö":
        column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü", df.columns)
        current_type = str(df[column].dtype)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        type_options = {
            '–¶–µ–ª–æ–µ —á–∏—Å–ª–æ (int)': 'int64',
            '–ß–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π (float)': 'float64',
            '–°—Ç—Ä–æ–∫–∞ (string)': 'str',
            '–î–∞—Ç–∞ (datetime)': 'datetime64',
            '–ë—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ (bool)': 'bool'
        }
        
        new_type = st.selectbox(
            f"–¢–µ–∫—É—â–∏–π —Ç–∏–ø: {current_type}. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø:", 
            list(type_options.keys())
        )
        
        if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞"):
            selected_type = type_options[new_type]
            df, success = change_column_type(df, column, selected_type)
            
            if success:
                st.session_state['df'] = df
                st.success(f"‚úÖ –¢–∏–ø —Å—Ç–æ–ª–±—Ü–∞ {column} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_type}")
                st.dataframe(df.head())  # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π DataFrame

    elif process_type == "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤":
        column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü", df.columns)
        method = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
            ["–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ–º", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å—Ä–µ–¥–Ω–∏–º", "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –º–µ–¥–∏–∞–Ω–æ–π"]
        )
        value = None
        if method == "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ–º":
            value = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
        if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å"):
            method_mapping = {
                "–£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏": "drop",
                "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ–º": "fill_value",
                "–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å—Ä–µ–¥–Ω–∏–º": "fill_mean",
                "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –º–µ–¥–∏–∞–Ω–æ–π": "fill_median"
            }
            selected_method = method_mapping[method]
            df, success = handle_missing_values(df, column, selected_method, value)
            if success:
                st.session_state['df'] = df
                st.success("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                st.dataframe(df.head())  # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π DataFrame
                
    elif process_type == "–£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤":
        subset = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", df.columns)
        keep_option = st.selectbox("–ö–∞–∫–∏–µ –¥—É–±–ª–∏–∫–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å?", ["–ü–µ—Ä–≤—ã–π", "–ü–æ—Å–ª–µ–¥–Ω–∏–π", "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ"])
        keep_mapping = {
            "–ü–µ—Ä–≤—ã–π": "first",
            "–ü–æ—Å–ª–µ–¥–Ω–∏–π": "last",
            "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ": False
        }
        if st.button("–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã"):
            keep = keep_mapping[keep_option]
            df, success = remove_duplicates(df, subset=subset if subset else None, keep=keep)
            if success:
                st.session_state['df'] = df
                st.success("‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")
                st.dataframe(df.head())  # –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π DataFrame

def show_export_tab(df):
    st.header("–≠–∫—Å–ø–æ—Ä—Ç")
    format_type = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞", ['csv', 'excel'])
    if st.button("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"):
        result = export_data(df, format_type)
        if result:
            data, mime_type, file_ext = result
            st.download_button(
                "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª",
                data,
                f"export.{file_ext}",
                mime_type
            )

def show_database_tab(df):
    st.header("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö")
    table_info = get_table_info()
    if table_info:
        for key, value in table_info.items():
            st.write(f"**{key}:** {value}")
    if st.button("‚ùå –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"):
        if delete_dataframe():
            st.session_state.pop('df', None)
            st.success("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞")
            st.rerun()

def show_reports_tab(df):
    st.header("–û—Ç—á–µ—Ç—ã")
    report_sections = st.multiselect(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞",
        ["–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
         "–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è", "–î—É–±–ª–∏–∫–∞—Ç—ã"],
        default=["–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö"]
    )
    
    if st.button("üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"):
        if report_sections:
            try:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                result = generate_data_report(
                    df=df,
                    sections=report_sections,
                    fname=f'report_{timestamp}.xlsx'
                )
                if result:
                    st.success("‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                    st.download_button(
                        "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç",
                        open(result, 'rb').read(),
                        os.path.basename(result),
                        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
